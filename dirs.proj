<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask AssemblyFile="$(WebSdkTools)\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.SubmitCodeSignJob" />
  <UsingTask AssemblyFile="$(WebSdkTools)\Microsoft.Web.MsBuildTasks2.dll" TaskName="Microsoft.Web.MsBuildTasks.WaitForCodeSignJobs" />
  
  <!-- 
    Variables that can be overriden by CI machine (official build):
    
      - CoreSdkVersion - specifies full version of core sdk package
      - CoreSdkPackagesDropDir - root drop dir that contains versioned build folders, e.g. \\cpvsbuild\Drops\Roslyn\Roslyn-Project-System\DotNet-Core-Sdk
      - WebSdkVersion -  web sdk full version
      - WebSdkPackagesDropDir [Required] - official drop folder path for web packages
  -->
  
  <PropertyGroup>
    <CoreSdkDropDir Condition="'$(CoreSdkDropDir)' == ''">\\cpvsbuild\Drops\Roslyn\Roslyn-Project-System\DotNet-Core-Sdk</CoreSdkDropDir>
    <VersionPrefix Condition="'$(VersionPrefix)' == ''">1.0.0</VersionPrefix>
    <VersionPrereleasePrefix Condition="'$(VersionPrereleasePrefix)' == ''">alpha</VersionPrereleasePrefix>
    <PackagesOutputPath>$(WebSdkRoot)\bin\$(Configuration)\NuGet</PackagesOutputPath>
    <LocalDropRoot>$(WebSdkRoot)\bin\$(Configuration)</LocalDropRoot>
    <CodeSignOutputPath>$(WebSdkRoot)\bin\Signed</CodeSignOutputPath>
    <NugetExe>$(WebSdkRoot)\tools\NuGet\NuGet.exe</NugetExe>
  </PropertyGroup>

  <ItemGroup>
    <ProjectFiles Include="src\Publish\Microsoft.NET.Sdk.Publish.Package\Microsoft.NET.Sdk.Publish.Package.csproj" />
    <ProjectFiles Include="src\Web\Microsoft.NET.Sdk.Web.ProjectSystem.Package\Microsoft.NET.Sdk.Web.ProjectSystem.Package.csproj" />
    <ProjectFiles Include="src\Web\Microsoft.NET.Sdk.Web.Package\Microsoft.NET.Sdk.Web.Package.csproj" />
  </ItemGroup>

  <UsingTask TaskName="GetCoreSdkBuildVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <CoreSdkDropDir ParameterType="System.String" Required="true" />
      <CoreSdkBuildVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            CoreSdkBuildVersion = "";
            if (!Directory.Exists(CoreSdkDropDir))
            {
                return false;
            }

            var coreSdkDropDirInfo = new DirectoryInfo(CoreSdkDropDir);
            var subDirs = coreSdkDropDirInfo.EnumerateDirectories("*.*", SearchOption.TopDirectoryOnly);
            if (subDirs != null && subDirs.Count() > 0)
            {
                CoreSdkBuildVersion = subDirs.OrderByDescending(x => x.LastWriteTime)
                                             .First().Name;
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="Build" DependsOnTargets="Init;_Build"/>
  
  <Target Name="Init" DependsOnTargets="_InitCoreSdk;_InitWebSdk">
  </Target>

  <Target Name="_InitCoreSdk" Condition="'$(CoreSdkVersion)' == ''">
    <!-- 
      Runs if core sdk version and drop path were not provided
      (final release builds, should provide final versions (not pre-release ones))
    -->
    <GetCoreSdkBuildVersion CoreSdkDropDir="$(CoreSdkDropDir)">
      <Output PropertyName="CoreSdkBuildVersion" TaskParameter="CoreSdkBuildVersion" />
    </GetCoreSdkBuildVersion>

    <PropertyGroup>
      <CoreSdkVersion Condition="'$(CoreSdkVersion)' == ''">$(VersionPrefix)-$(VersionPrereleasePrefix)-$(CoreSdkBuildVersion)</CoreSdkVersion>
      <CoreSdkPackagesDropDir>$(CoreSdkDropDir)\$(CoreSdkBuildVersion)\Packages</CoreSdkPackagesDropDir>
    </PropertyGroup>
  </Target>

  <Target Name="_InitWebSdk" Condition="'$(WebSdkVersion)' == ''">
    <!-- 
      Runs if web sdk version was not provided
      (final release builds, should provide final versions (not pre-release ones))
    -->
    <PropertyGroup>
      <WebSdkBuildVersion Condition="'$(WebSdkVersion)' == ''">$(CoreSdkBuildVersion)</WebSdkBuildVersion>
      <CiBuildPostfix Condition="'$(BUILD_NUMBER)' != ''">-$(BUILD_NUMBER)</CiBuildPostfix>
      <WebSdkVersion Condition="'$(WebSdkVersion)' == ''">$(VersionPrefix)-$(VersionPrereleasePrefix)-$(WebSdkBuildVersion)$(CiBuildPostfix)</WebSdkVersion>
    </PropertyGroup>
  </Target>
  
  <Target Name="_Build">
    <PropertyGroup>
      <!-- When C# projects have external dependencies that are shared,
                 the Copy task can fail during parallel builds because multiple
                 builds attempt to copy the same DLL at the same time.
                 These properties tell the Copy task to retry after such a failure,
                 so the build can ultimately succeed. -->
      <CopyRetryProperties>Retries=20;RetryDelayMilliseconds=150</CopyRetryProperties>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectFiles)" BuildInParallel="true" Targets="Build"
             Properties="$(CopyRetryProperties);CoreSdkVersion=$(CoreSdkVersion);WebSdkVersion=$(WebSdkVersion)" />
  </Target>

  <Target Name="Clean">
    <MSBuild Projects="@(ProjectFiles)" BuildInParallel="true" Targets="Clean" />
  </Target>

  <Target Name="_Publish">
    <!-- Generate semaphore files for core and web sdk -->
    <PropertyGroup>
      <WebSdkSemaphorePath>$(LocalDropRoot)\web-sdk.sem</WebSdkSemaphorePath>
    </PropertyGroup>

    <ItemGroup>
      <SemaphoreParameter Include="CoreSdkVersion=$(CoreSdkBuildVersion)" />
      <SemaphoreParameter Include="CoreSdkDropPath=$(CoreSdkDropDir)\$(CoreSdkBuildVersion)" />
      <SemaphoreParameter Include="WebSdkVersion=$(WebSdkVersion)"/>
      <SemaphoreParameter Include="WebSdkDropPath=$(WebSdkPackagesDropDir)" />
    </ItemGroup>

    <GenerateSemaphore Parameters="@(SemaphoreParameter)" SemaphoreFilePath="$(WebSdkSemaphorePath)" />

    <ItemGroup>
      <SignedPackages Include="$(CodeSignOutputPath)\Packages\*.nupkg" />
    </ItemGroup>

    <Exec Command="$(NugetExe) push %(SignedPackages.Identity) $(MyGetSecurityToken) -Source https://dotnet.myget.org/F/dotnet-web/api/v2/package" Condition="'$(MyGetSecurityToken)' != ''" />   
  </Target>

  <UsingTask TaskName="GenerateSemaphore" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup>
      <Parameters ParameterType="System.String[]" Required="true" />
      <SemaphoreFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var builder = new StringBuilder();
            builder.AppendLine("[Semaphore]");
            foreach(var par in Parameters)
            {
              builder.AppendLine(par);
            }
            
            var retry = 5;
            while (retry > 0)
            {
              try
              {
                File.WriteAllText(SemaphoreFilePath, builder.ToString());
                break;
              }
              catch
              {
                System.Threading.Thread.Sleep(500);
                retry--;
              }
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>  
  
  
  <!-- CODESIGN related targets -->
  <PropertyGroup>
    <CodeSignCertificates>400</CodeSignCertificates>
    <CodeSignDisplayName>Microsoft ASP.NET</CodeSignDisplayName>
    <CodeSignUrl>http://www.asp.net/</CodeSignUrl>
    <CodeSignCreateTestJob Condition="'$(CodeSignCreateTestJob)' == ''">false</CodeSignCreateTestJob>
    <CodeSignOutputPath>$(WebSdkRoot)\bin\Signed</CodeSignOutputPath>
    <CodeSignScriptsPath>$(CodeSignOutputPath)\scripts</CodeSignScriptsPath>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <BinariesToSign>
      <Certificates>$(CodeSignCertificates)</Certificates>
      <Description>Signing publishing targets binaries</Description>
      <DisplayName>$(CodeSignDisplayName)</DisplayName>
      <Url>$(CodeSignUrl)</Url>
    </BinariesToSign>
  </ItemDefinitionGroup>

  <Target Name="Sign" DependsOnTargets="_Sign;_Publish">
    
  </Target>
  
  <Target Name="_Sign" Condition="'$(Sign)' != ''" DependsOnTargets="Build">
    <ItemGroup>
      <CodeSignApprovers Include="$(CodeSignApprovers)" />
    </ItemGroup>

    <PropertyGroup>
      <UnsignedPackagesPath>$(WebSdkRoot)\obj\packages</UnsignedPackagesPath>
      <UnsignedBinariesPath>$(WebSdkRoot)\obj\unsignedbinaries</UnsignedBinariesPath>
      <SignedBinariesPath>$(CodeSignOutputPath)</SignedBinariesPath>
    </PropertyGroup>

    <ItemGroup>
      <UnsignedPackages Include="$(PackagesOutputPath)\*.nupkg" />
    </ItemGroup>

    <!-- Extract the content -->
    <Exec Command="$(WebSdkTools)\7za.exe x -y -scsUTF-8 -o@(UnsignedPackages->'$(UnsignedPackagesPath)\%(Filename)') %(UnsignedPackages.Identity)" />

    <!-- Flatten the file names -->
    <ItemGroup>
      <_UnsignedBinaries Include="$(UnsignedPackagesPath)\**\*.dll;
                                        $(UnsignedPackagesPath)\**\*.exe;
                                        $(UnsignedPackagesPath)\**\*.psd1;
                                        $(UnsignedPackagesPath)\**\*.psm1;
                                        $(UnsignedPackagesPath)\**\*.ps1" />

      <UnsignedBinaries Include="@(_UnsignedBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(UnsignedBinariesPath)\$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(SignedBinariesPath)\$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</SignedFlatFileName>
      </UnsignedBinaries>
    </ItemGroup>

    <ItemGroup>
      <PackageBinariesToSign Include="%(UnsignedBinaries.UnsignedFlatFileName)" />
    </ItemGroup>

    <Copy SourceFiles="@(UnsignedBinaries)" DestinationFiles="@(UnsignedBinaries->'%(UnsignedFlatFileName)')" SkipUnchangedFiles="true" />

    <RemoveDir Directories="$(CodeSignScriptsPath)" />
    <MakeDir Directories="$(CodeSignScriptsPath)" />

    <ItemGroup>
      <BinariesToSign Include="@(PackageBinariesToSign)">
        <CopyScript>PublishBinariesAuth400.bat</CopyScript>
        <CopyScriptTargetPath>$(CodeSignOutputPath)</CopyScriptTargetPath>
      </BinariesToSign>
    </ItemGroup>

    <SubmitCodeSignJob
        Approvers="$(CodeSignApprovers)"
        Certificates="%(Certificates)"
        CopyScript="$(CodeSignScriptsPath)\%(CopyScript)"
        CopyScriptRemoveTargetFolder="false"
        CopyScriptTargetPath="%(CopyScriptTargetPath)"
        Description="%(Description)"
        DisplayName="%(DisplayName)"
        DisplayUrl="%(Url)"
        Files="@(BinariesToSign)"
        GenerateCopyScript="true"
        Poll="false"
        SSL="true"
        CreateTestJob="$(CodeSignCreateTestJob)"
        Test="$(TestCodeSign)">
      <Output TaskParameter="JobNumber" ItemName="CodeSignJobNumbers" />
      <Output TaskParameter="CompletionPath" PropertyName="CodeSignCompletionPath" />
    </SubmitCodeSignJob>

    <WaitForCodeSignJobs JobNumbers="@(CodeSignJobNumbers)" Test="$(TestCodeSign)" />

    <Exec Command="$(CodeSignScriptsPath)\%(BinariesToSign.CopyScript)" />

    <!-- Replace unsigned files with signed files -->
    <Copy SourceFiles="@(UnsignedBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(UnsignedBinaries->'%(FullPath)')" />

    <ItemGroup>
      <NuSpec Include="$(UnsignedPackagesPath)\**\*.nuspec" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFile)"
             Properties="Configuration=$(Configuration);Sign=$(Sign);TestCodeSign=$(TestCodeSign);NuSpecFile=%(NuSpec.Identity);OutDir=$(CodeSignOutputPath)\Packages"
             Targets="RebuildPackage"/>
  </Target>

  <Target Name="RebuildPackage">
    <PropertyGroup>
      <WorkingDir>$([System.IO.Path]::GetDirectoryName($(NuSpecFile)))</WorkingDir>
      <PackageName>$([System.IO.Path]::GetFileName($(WorkingDir)))</PackageName>
    </PropertyGroup>
    <Error Condition="'$(OutDir)'==''" Text="Output dir not specified" />
    <Exec Command="$(DNXToolsPath)7za.exe a -tzip -mx9 -r -y $(OutDir)\$(PackageName).nupkg *" WorkingDirectory="$(WorkingDir)" />
  </Target>

</Project>
